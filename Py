import json
import csv
import re
from datetime import datetime

# Load the JSON data from the correct file path
with open(r'C:\repo\json\PROD\PA.json') as json_file:
    jsondata = json.load(json_file)

# Function to flatten JSON and get key-value pairs, removing array indices
def flatten_json(json_obj, parent_key='', sep='.'):
    items = {}
    if isinstance(json_obj, dict):
        for k, v in json_obj.items():
            new_key = f"{parent_key}{sep}{k}" if parent_key else k
            if isinstance(v, dict):
                items.update(flatten_json(v, new_key, sep=sep))
            elif isinstance(v, list):
                for i, item in enumerate(v):
                    items.update(flatten_json(item, f"{new_key}[{i}]", sep=sep))
            else:
                items[new_key] = v
    elif isinstance(json_obj, list):
        for i, item in enumerate(json_obj):
            items.update(flatten_json(item, parent_key, sep=sep))
    else:
        items[parent_key] = json_obj
    return items

# Remove array indices from keys
def clean_keys(items):
    clean_items = {}
    for key, value in items.items():
        clean_key = re.sub(r'\[\d+\]', '', key)
        clean_items[clean_key] = value
    return clean_items

# Ensure jsondata is a list
if isinstance(jsondata, dict):
    jsondata = [jsondata]

# Flatten and clean each JSON entry
flattened_data = []
for entry in jsondata:
    flat_entry = flatten_json(entry)
    clean_entry = clean_keys(flat_entry)
    flattened_data.append(clean_entry)

# Generate timestamped filename with safe characters
timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
csv_file_path = f'C:\\repo\\json\\PROD\\PA_{timestamp}.csv'

# Collect all unique keys
all_keys = set()
for data in flattened_data:
    all_keys.update(data.keys())

all_keys = sorted(all_keys)  # Optional: sort keys alphabetically

# Write to CSV
with open(csv_file_path, 'w', newline='') as data_file:
    csv_writer = csv.writer(data_file)
    
    # Write the header
    csv_writer.writerow(all_keys)
    
    # Write the data
    for data in flattened_data:
        row = [data.get(key, '') for key in all_keys]
        csv_writer.writerow(row)

print(f"Data successfully written to {csv_file_path}")
