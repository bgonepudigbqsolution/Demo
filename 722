import json
import csv
import copy

# File paths
json_file_path = r'C:\repo\json\PROD\PA.json'  # Update this path
output_csv_path = r'C:\repo\json\PROD\PA_output.csv'  # Update this path

# Load JSON data
try:
    with open(json_file_path) as json_file:
        json_data = json.load(json_file)
except FileNotFoundError:
    print(f"File not found: {json_file_path}")
    exit(1)
except json.JSONDecodeError:
    print(f"Error decoding JSON from file: {json_file_path}")
    exit(1)

# Function to flatten JSON and handle nested lists
def flatten_json(obj, parent_key='', sep='.'):
    items = []
    if isinstance(obj, dict):
        for k, v in obj.items():
            new_key = f'{parent_key}{sep}{k}' if parent_key else k
            items.extend(flatten_json(v, new_key, sep=sep).items())
    elif isinstance(obj, list):
        for i, v in enumerate(obj):
            new_key = f'{parent_key}{sep}{i}' if parent_key else str(i)
            items.extend(flatten_json(v, new_key, sep=sep).items())
    else:
        items.append((parent_key, obj))
    return dict(items)

# Function to expand rows for lists
def expand_rows(data):
    all_rows = []
    base_row = {}
    
    for key, value in data.items():
        if isinstance(value, list):
            for item in value:
                row = copy.deepcopy(base_row)
                row.update(flatten_json({key: item}))
                all_rows.append(row)
        else:
            base_row[key] = value
    
    if not all_rows:
        all_rows.append(base_row)
    
    return all_rows

# Flatten the JSON data
flattened_data = [flatten_json(entry) for entry in json_data]

# Expand rows for nested lists
expanded_data = []
for row in flattened_data:
    expanded_data.extend(expand_rows(row))

# Extract headers
headers = sorted({key for row in expanded_data for key in row.keys()})

# Write to CSV
try:
    with open(output_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=headers)
        writer.writeheader()
        for row in expanded_data:
            writer.writerow(row)
    print(f"Data successfully written to {output_csv_path}")
except IOError:
    print(f"Error writing to file: {output_csv_path}")
