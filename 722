import json
import csv
import re
from datetime import datetime

# File paths
json_file_path = r'C:\repo\json\PROD\PA.json'  # Update this path
output_csv_path = r'C:\repo\json\PROD\PA_output.csv'  # Update this path

# Load JSON data
try:
    with open(json_file_path) as json_file:
        json_data = json.load(json_file)
except FileNotFoundError:
    print(f"File not found: {json_file_path}")
    exit(1)
except json.JSONDecodeError:
    print(f"Error decoding JSON from file: {json_file_path}")
    exit(1)

# Function to flatten JSON and extract key-value pairs, handling lists
def extract_values(obj, parent_key="", current_row=None, rows=None):
    if current_row is None:
        current_row = {}
    if rows is None:
        rows = []
    
    if isinstance(obj, dict):
        for k, v in obj.items():
            full_key = f"{parent_key}.{k}" if parent_key else k
            extract_values(v, full_key, current_row, rows)
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            new_row = current_row.copy()  # Copy current row data to the new row
            full_key = f"{parent_key}"  # Keep parent key without index
            extract_values(item, full_key, new_row, rows)
            rows.append(new_row)
    else:
        current_row[parent_key] = obj
    return rows

# Ensure json_data is a list
if isinstance(json_data, dict):
    json_data = [json_data]

# Extract key-value pairs from each JSON entry and flatten them into rows
all_rows = []
for entry in json_data:
    rows = extract_values(entry)
    all_rows.extend(rows)

# Clean headers and prepare data rows
cleaned_headers = []

for row in all_rows:
    for key in row.keys():
        cleaned_key = re.sub(r"\.\d+", "", key)
        if cleaned_key not in cleaned_headers:
            cleaned_headers.append(cleaned_key)

# Write to CSV
try:
    with open(output_csv_path, 'w', newline='', encoding='utf-8') as data_file:
        csv_writer = csv.writer(data_file)
        csv_writer.writerow(cleaned_headers)
        for row in all_rows:
            csv_writer.writerow([row.get(header, "") for header in cleaned_headers])
    print(f"Data successfully written to {output_csv_path}")
except IOError:
    print(f"Error writing to file: {output_csv_path}")
